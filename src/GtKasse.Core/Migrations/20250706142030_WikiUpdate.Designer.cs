// <auto-generated />
using System;
using GtKasse.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GtKasse.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250706142030_WikiUpdate")]
    partial class WikiUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4", DelegationModes.ApplyToDatabases);
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("GtKasse.Core.Entities.Boat", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("MaxRentalDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("boats", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.BoatRental", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("BoatId")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset?>("CancelledOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("BoatId");

                    b.HasIndex("UserId");

                    b.ToTable("boat_rentals", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Booking", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("BookedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("CancelledOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<byte[]>("FoodId")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("InvoiceId")
                        .HasColumnType("binary(16)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserId", "BookedOn");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.ClubhouseBooking", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.ToTable("clubhouse_bookings", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.EmailQueue", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPrio")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("Sent")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Sent", "Created", "IsPrio");

                    b.ToTable("email_queue", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Food", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("FoodListId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodListId");

                    b.ToTable("foods", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.FoodList", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ValidFrom");

                    b.ToTable("food_lists", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityRoleClaimGuid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("RoleId")
                        .IsRequired()
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityRoleGuid", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 191, 247, 188, 251, 191, 140, 15, 68, 147, 156, 246, 118, 49, 16, 154, 160 },
                            ConcurrencyStamp = "CFAD6F62-EEAA-4ECD-B847-0762C704EC45",
                            Name = "administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new byte[] { 118, 69, 182, 31, 144, 63, 233, 76, 140, 58, 207, 161, 63, 88, 113, 103 },
                            ConcurrencyStamp = "6EE38FDC-5CE5-42FD-A5A5-168573DB2F86",
                            Name = "treasurer",
                            NormalizedName = "TREASURER"
                        },
                        new
                        {
                            Id = new byte[] { 224, 7, 77, 29, 174, 64, 203, 69, 164, 246, 57, 118, 114, 243, 96, 91 },
                            ConcurrencyStamp = "995137CB-BD7B-4747-884E-A7467F3C0A3A",
                            Name = "kitchen",
                            NormalizedName = "KITCHEN"
                        },
                        new
                        {
                            Id = new byte[] { 165, 13, 169, 3, 240, 171, 233, 69, 155, 128, 205, 172, 121, 11, 113, 5 },
                            ConcurrencyStamp = "956824FE-2F13-4919-B2D2-0E60BECFCA12",
                            Name = "member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new byte[] { 167, 240, 198, 157, 22, 113, 32, 72, 139, 118, 79, 32, 183, 48, 83, 238 },
                            ConcurrencyStamp = "3096E774-529C-41B4-8CD3-355E0D2C930D",
                            Name = "interested",
                            NormalizedName = "INTERESTED"
                        },
                        new
                        {
                            Id = new byte[] { 236, 155, 220, 45, 150, 235, 213, 76, 148, 180, 221, 13, 153, 161, 150, 100 },
                            ConcurrencyStamp = "F3BFC39C-70B7-4E91-A70B-131925290446",
                            Name = "tripmanager",
                            NormalizedName = "TRIPMANAGER"
                        },
                        new
                        {
                            Id = new byte[] { 22, 218, 114, 135, 188, 251, 175, 70, 165, 44, 200, 60, 144, 202, 116, 201 },
                            ConcurrencyStamp = "49DD2CBF-AAC9-4015-9016-9E3ED25547DF",
                            Name = "chairperson",
                            NormalizedName = "CHAIRPERSON"
                        },
                        new
                        {
                            Id = new byte[] { 66, 216, 128, 239, 15, 74, 19, 70, 130, 235, 72, 166, 112, 186, 194, 29 },
                            ConcurrencyStamp = "EA00C945-985C-42AD-B149-7D6FBCE9C279",
                            Name = "usermanager",
                            NormalizedName = "USERMANAGER"
                        },
                        new
                        {
                            Id = new byte[] { 96, 48, 73, 249, 184, 48, 243, 75, 164, 190, 116, 99, 11, 15, 164, 35 },
                            ConcurrencyStamp = "D8FEF733-1C63-433F-916F-99B8645D1487",
                            Name = "fleetmanager",
                            NormalizedName = "FLEETMANAGER"
                        },
                        new
                        {
                            Id = new byte[] { 10, 248, 142, 102, 87, 159, 97, 73, 190, 172, 84, 10, 216, 0, 50, 65 },
                            ConcurrencyStamp = "4B04648D-DE82-4B0B-B014-3CE0BE5454FD",
                            Name = "boatmanager",
                            NormalizedName = "BOATMANAGER"
                        },
                        new
                        {
                            Id = new byte[] { 117, 14, 212, 175, 254, 220, 70, 76, 157, 76, 255, 112, 31, 34, 81, 121 },
                            ConcurrencyStamp = "4B04648D-DE82-4B0B-B014-3CE0BE5454FD",
                            Name = "housemanager",
                            NormalizedName = "HOUSEMANAGER"
                        },
                        new
                        {
                            Id = new byte[] { 43, 68, 201, 109, 121, 50, 204, 70, 149, 192, 29, 79, 140, 61, 49, 240 },
                            ConcurrencyStamp = "4B04648D-DE82-4B0B-B014-3CE0BE5454FD",
                            Name = "mailingmanager",
                            NormalizedName = "MAILINGMANAGER"
                        },
                        new
                        {
                            Id = new byte[] { 227, 223, 194, 2, 49, 115, 246, 69, 146, 155, 249, 131, 39, 63, 45, 116 },
                            ConcurrencyStamp = "4B04648D-DE82-4B0B-B014-3CE0BE5454FD",
                            Name = "wikimanager",
                            NormalizedName = "WIKIMANAGER"
                        });
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserClaimGuid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserGuid", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressNumber")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("AuthenticatorKey")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("DebtorNumber")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("LeftOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserLoginGuid", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("binary(16)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserRoleGuid", b =>
                {
                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("RoleId")
                        .HasColumnType("binary(16)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserTokenGuid", b =>
                {
                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Invoice", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("InvoicePeriodId")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset?>("PaidOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(6,2)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("InvoicePeriodId");

                    b.HasIndex("UserId");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.InvoicePeriod", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("To")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("To");

                    b.ToTable("invoice_periods", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Mailing", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<bool>("CanSendToAllMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmailCount")
                        .HasColumnType("int");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OtherRecipients")
                        .HasColumnType("longtext");

                    b.Property<string>("ReplyAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("mailings", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.MyMailing", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("MailingId")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("MailingId");

                    b.HasIndex("UserId");

                    b.ToTable("my_mailings", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Trip", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset?>("BookingEnd")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("BookingStart")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Categories")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxBookings")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Start", "End");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TripBooking", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("BookedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("CancelledOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ConfirmedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<byte[]>("TripId")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("trip_bookings", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TripChat", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<byte[]>("TripId")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("trip_chats", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Tryout", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset?>("BookingEnd")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("BookingStart")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("MaxBookings")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValue("Anfängertraining");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tryouts", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TryoutBooking", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("BookedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("CancelledOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ConfirmedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<byte[]>("TryoutId")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("TryoutId");

                    b.HasIndex("UserId");

                    b.ToTable("tryout_bookings", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TryoutChat", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<byte[]>("TryoutId")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("TryoutId");

                    b.HasIndex("UserId");

                    b.ToTable("tryout_chats", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Vehicle", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<bool>("IsInUse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.VehicleBooking", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("BookedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("CancelledOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ConfirmedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("VehicleId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_bookings", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.WikiArticle", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("wiki_articles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("longtext");

                    b.Property<string>("Xml")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("data_protection_keys", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.BoatRental", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Boat", "Boat")
                        .WithMany("BoatRentals")
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("BoatRentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Boat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Booking", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Food", "Food")
                        .WithMany("Bookings")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.Invoice", "Invoice")
                        .WithMany("Bookings")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Food");

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Food", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.FoodList", "FoodList")
                        .WithMany("Foods")
                        .HasForeignKey("FoodListId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FoodList");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityRoleClaimGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityRoleGuid", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserClaimGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserLoginGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserRoleGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityRoleGuid", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserTokenGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Invoice", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.InvoicePeriod", "InvoicePeriod")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoicePeriodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InvoicePeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.MyMailing", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Mailing", "Mailing")
                        .WithMany("MyMailings")
                        .HasForeignKey("MailingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("MyMailings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Mailing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Trip", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TripBooking", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Trip", "Trip")
                        .WithMany("TripBookings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("TripBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TripChat", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Trip", "Trip")
                        .WithMany("TripChats")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("TripChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Tryout", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("Tryouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TryoutBooking", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Tryout", "Tryout")
                        .WithMany("TryoutBookings")
                        .HasForeignKey("TryoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("TryoutBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Tryout");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TryoutChat", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Tryout", "Tryout")
                        .WithMany("TryoutChats")
                        .HasForeignKey("TryoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("TryoutChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Tryout");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.VehicleBooking", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("VehicleBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.WikiArticle", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("WikiArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Boat", b =>
                {
                    b.Navigation("BoatRentals");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Food", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.FoodList", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityRoleGuid", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserGuid", b =>
                {
                    b.Navigation("BoatRentals");

                    b.Navigation("Bookings");

                    b.Navigation("Invoices");

                    b.Navigation("MyMailings");

                    b.Navigation("TripBookings");

                    b.Navigation("TripChats");

                    b.Navigation("Trips");

                    b.Navigation("TryoutBookings");

                    b.Navigation("TryoutChats");

                    b.Navigation("Tryouts");

                    b.Navigation("UserRoles");

                    b.Navigation("VehicleBookings");

                    b.Navigation("WikiArticles");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Invoice", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.InvoicePeriod", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Mailing", b =>
                {
                    b.Navigation("MyMailings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Trip", b =>
                {
                    b.Navigation("TripBookings");

                    b.Navigation("TripChats");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Tryout", b =>
                {
                    b.Navigation("TryoutBookings");

                    b.Navigation("TryoutChats");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Vehicle", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
