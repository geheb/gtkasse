// <auto-generated />
using System;
using GtKasse.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GtKasse.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250716212924_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("GtKasse.Core.Entities.Boat", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxRentalDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("boats");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.BoatRental", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("BoatId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BoatId");

                    b.HasIndex("UserId");

                    b.ToTable("boat_rentals");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.ClubhouseBooking", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("clubhouse_bookings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.EmailQueue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrio")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Sent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Sent", "Created", "IsPrio");

                    b.ToTable("email_queue");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodListId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FoodListId");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.FoodBooking", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FoodId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserId", "BookedOn");

                    b.ToTable("food_bookings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.FoodList", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("food_lists");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityRoleClaimGuid", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("identity_role_claims", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityRoleGuid", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "IX_identity_roles_NormalizedName")
                        .IsUnique();

                    b.ToTable("identity_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fbbcf7bf8cbf440f939cf67631109aa0",
                            ConcurrencyStamp = "CFAD6F62-EEAA-4ECD-B847-0762C704EC45",
                            Name = "administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "1fb645763f904ce98c3acfa13f587167",
                            ConcurrencyStamp = "6EE38FDC-5CE5-42FD-A5A5-168573DB2F86",
                            Name = "treasurer",
                            NormalizedName = "TREASURER"
                        },
                        new
                        {
                            Id = "1d4d07e040ae45cba4f6397672f3605b",
                            ConcurrencyStamp = "995137CB-BD7B-4747-884E-A7467F3C0A3A",
                            Name = "kitchen",
                            NormalizedName = "KITCHEN"
                        },
                        new
                        {
                            Id = "03a90da5abf045e99b80cdac790b7105",
                            ConcurrencyStamp = "956824FE-2F13-4919-B2D2-0E60BECFCA12",
                            Name = "member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "9dc6f0a7711648208b764f20b73053ee",
                            ConcurrencyStamp = "3096E774-529C-41B4-8CD3-355E0D2C930D",
                            Name = "interested",
                            NormalizedName = "INTERESTED"
                        },
                        new
                        {
                            Id = "2ddc9beceb964cd594b4dd0d99a19664",
                            ConcurrencyStamp = "F3BFC39C-70B7-4E91-A70B-131925290446",
                            Name = "tripmanager",
                            NormalizedName = "TRIPMANAGER"
                        },
                        new
                        {
                            Id = "8772da16fbbc46afa52cc83c90ca74c9",
                            ConcurrencyStamp = "49DD2CBF-AAC9-4015-9016-9E3ED25547DF",
                            Name = "chairperson",
                            NormalizedName = "CHAIRPERSON"
                        },
                        new
                        {
                            Id = "ef80d8424a0f461382eb48a670bac21d",
                            ConcurrencyStamp = "EA00C945-985C-42AD-B149-7D6FBCE9C279",
                            Name = "usermanager",
                            NormalizedName = "USERMANAGER"
                        },
                        new
                        {
                            Id = "f949306030b84bf3a4be74630b0fa423",
                            ConcurrencyStamp = "D8FEF733-1C63-433F-916F-99B8645D1487",
                            Name = "fleetmanager",
                            NormalizedName = "FLEETMANAGER"
                        },
                        new
                        {
                            Id = "668ef80a9f574961beac540ad8003241",
                            ConcurrencyStamp = "4B04648D-DE82-4B0B-B014-3CE0BE5454FD",
                            Name = "boatmanager",
                            NormalizedName = "BOATMANAGER"
                        },
                        new
                        {
                            Id = "afd40e75dcfe4c469d4cff701f225179",
                            ConcurrencyStamp = "4B04648D-DE82-4B0B-B014-3CE0BE5454FD",
                            Name = "housemanager",
                            NormalizedName = "HOUSEMANAGER"
                        },
                        new
                        {
                            Id = "6dc9442b327946cc95c01d4f8c3d31f0",
                            ConcurrencyStamp = "4B04648D-DE82-4B0B-B014-3CE0BE5454FD",
                            Name = "mailingmanager",
                            NormalizedName = "MAILINGMANAGER"
                        },
                        new
                        {
                            Id = "02c2dfe3733145f6929bf983273f2d74",
                            ConcurrencyStamp = "4B04648D-DE82-4B0B-B014-3CE0BE5454FD",
                            Name = "wikimanager",
                            NormalizedName = "WIKIMANAGER"
                        });
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserClaimGuid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("identity_user_claims", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserGuid", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressNumber")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthenticatorKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DebtorNumber")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LeftOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "IX_identity_users_NormalizedEmail")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedUserName" }, "IX_identity_users_NormalizedUserName")
                        .IsUnique();

                    b.ToTable("identity_users", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserLoginGuid", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("identity_user_logins", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserRoleGuid", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("identity_user_roles", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserTokenGuid", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("identity_user_tokens", (string)null);
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoicePeriodId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaidOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Total")
                        .HasPrecision(6, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InvoicePeriodId");

                    b.HasIndex("UserId");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.InvoicePeriod", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("To");

                    b.ToTable("invoice_periods");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Mailing", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanSendToAllMembers")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmailCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OtherRecipients")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplyAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("mailings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.MyMailing", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MailingId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MailingId");

                    b.HasIndex("UserId");

                    b.ToTable("my_mailings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Trip", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("Categories")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxBookings")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Start", "End");

                    b.ToTable("trips");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TripBooking", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConfirmedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TripId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("trip_bookings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TripChat", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TripId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("trip_chats");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Tryout", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingStart")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxBookings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tryouts");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TryoutBooking", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConfirmedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TryoutId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TryoutId");

                    b.HasIndex("UserId");

                    b.ToTable("tryout_bookings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TryoutChat", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TryoutId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TryoutId");

                    b.HasIndex("UserId");

                    b.ToTable("tryout_chats");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInUse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.VehicleBooking", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConfirmedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_bookings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.WikiArticle", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("wiki_articles");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.BoatRental", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Boat", "Boat")
                        .WithMany("BoatRentals")
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Boat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Food", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.FoodList", "FoodList")
                        .WithMany("Foods")
                        .HasForeignKey("FoodListId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FoodList");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.FoodBooking", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Food", "Food")
                        .WithMany("FoodBookings")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.Invoice", "Invoice")
                        .WithMany("FoodBookings")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Food");

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityRoleClaimGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityRoleGuid", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserClaimGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserLoginGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserRoleGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityRoleGuid", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserTokenGuid", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Invoice", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.InvoicePeriod", "InvoicePeriod")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoicePeriodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InvoicePeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.MyMailing", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Mailing", "Mailing")
                        .WithMany("MyMailings")
                        .HasForeignKey("MailingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Mailing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Trip", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TripBooking", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Trip", "Trip")
                        .WithMany("TripBookings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TripChat", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Trip", "Trip")
                        .WithMany("TripChats")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Tryout", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TryoutBooking", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Tryout", "Tryout")
                        .WithMany("TryoutBookings")
                        .HasForeignKey("TryoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Tryout");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.TryoutChat", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.Tryout", "Tryout")
                        .WithMany("TryoutChats")
                        .HasForeignKey("TryoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Tryout");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.VehicleBooking", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GtKasse.Core.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.WikiArticle", b =>
                {
                    b.HasOne("GtKasse.Core.Entities.IdentityUserGuid", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Boat", b =>
                {
                    b.Navigation("BoatRentals");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Food", b =>
                {
                    b.Navigation("FoodBookings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.FoodList", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityRoleGuid", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.IdentityUserGuid", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Invoice", b =>
                {
                    b.Navigation("FoodBookings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.InvoicePeriod", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Mailing", b =>
                {
                    b.Navigation("MyMailings");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Trip", b =>
                {
                    b.Navigation("TripBookings");

                    b.Navigation("TripChats");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Tryout", b =>
                {
                    b.Navigation("TryoutBookings");

                    b.Navigation("TryoutChats");
                });

            modelBuilder.Entity("GtKasse.Core.Entities.Vehicle", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
