@page
@model GtKasse.Ui.Pages.MyTrips.CreateTripBookingModel
@{
    ViewData["Title"] = Model.GetNode().Title;
    ViewData["HasFooter"] = true;

    var dateConverter = new GermanDateTimeConverter();
    var indexUrl = Url.PageLink("Index");
}

@await Html.PartialAsync("_Header")

<section class="section">
    <div class="container">

        @Html.CreateBreadcrumb()

        <div class="list has-hoverable-list-items has-visible-pointer-controls">
            @if (Model.Items.Length < 1)
            {
                <div class="list-item">Keine Fahrten vorhanden.</div>
            }
            @foreach (var i in Model.Items)
            {
                <div class="list-item">
                    <div class="list-item-image">
                        <i class="fa-solid fa-location-dot fa-2x has-text-info"></i>
                    </div>
                    <div class="list-item-content">
                        <div class="list-item-title">@dateConverter.Format(i.Start, i.End) - @i.Target</div>
                        <div class="list-item-description">
                            <span class="tag is-rounded">@i.BookingCount / @i.MaxBookings</span>
                            @if (i.ContactEmail is not null)
                            {
                                <span class="tag is-rounded is-warning"><a href="mailto:@i.ContactEmail">@i.ContactName</a></span>
                            }
                            else
                            {
                                <span class="tag is-rounded is-warning">@i.ContactName</span>
                            }
                        </div>
                    </div>
                    <div class="list-item-controls">
                        <div class="buttons">
                            <a class="button is-dark is-inverted open-modal" href="#" data-target="#infoModal"
                               data-info='@Json.Serialize(new { date = dateConverter.Format(i.Start, i.End), target = i.Target, contact = i.ContactName, contactemail = i.ContactEmail, description = i.Description, users = i.BookingUsers, categories = i.Categories })'>
                                <span class="icon"><i class="fas fa-info"></i></span>
                            </a>
                            @if (i.CanAccept)
                            {
                                <a class="button is-dark is-inverted open-modal" href="#" data-target="#createModal"
                                   data-info='@Json.Serialize(new { date = dateConverter.Format(i.Start, i.End), target = i.Target, contact = i.ContactName, categories = i.Categories })'
                                   data-url="@(Url.PageLink(string.Empty, "create", new { id = i.Id }))">
                                    <span class="icon"><i class="fas fa-check"></i></span>
                                </a>
                            }
                        </div>
                     </div>
                </div>
            }
        </div>

    </div>
</section>

@Html.CreateModalTemplateStart("createModal","An der Fahrt anmelden")
<div class="content">
    <div>Ziel: <span class="tripTarget"></span></div>
    <div>Zeitpunkt: <span class="tripDate"></span></div>
    <div>Kategorien: <span class="tripCategories"></span></div>
    <div>Ansprechpartner: <span class="tag is-rounded is-warning tripContact"></span></div>
    <hr />
    <p>Andere Person anmelden (optional):</p>
    <input class="input" type="text" />
</div>
@Html.CreateModalTemplateEnd(true)

@Html.CreateModalTemplateStart("infoModal","Über die Fahrt")
<div class="content">
    <div>Ziel: <span class="tripTarget"></span></div>
    <div>Zeitpunkt: <span class="tripDate"></span></div>
    <div>Kategorien: <span class="tripCategories"></span></div>
    <div>Ansprechpartner: <span class="tag is-rounded is-warning"><a href="#" class="tripContact"></a></span></div>
    <div>Anmeldungen: <span class="tripUsers"></span></div>
    <hr />
    <p class="tripDescription"></p>
</div>
@Html.CreateModalTemplateEnd(false)

@await Html.PartialAsync("_Footer")

@section Scripts {
<script type="text/javascript">
    $(function () {

        handleModal({
            id: '#infoModal',
            init: {
                datainfo: 'info',
                action: function (target, data) {
                    const d = JSON.parse(data);
                    const tagUsers = $.map(d.users, function (u) { return `<span class="tag is-rounded is-info">${u}</span>`; });
                    $(target).find('.tripUsers').html(tagUsers.join(' '));
                    $(target).find('.tripTarget').text(d.target);
                    $(target).find('.tripDate').text(d.date);
                        const tagCategories = $.map(d.categories, function (c) { return `<span class="tag is-rounded">${c}</span>`; });
                    $(target).find('.tripCategories').html(tagCategories.join(' '));
                    $(target).find('.tripContact').attr('href', d.contactemail ? `mailto:${d.contactemail}` : '#').text(d.contact);
                    $(target).find('.tripDescription').html(d.description);
                }
            }
        });

        handleModal({
            id: '#createModal',
            token: {@Html.AjaxCsrfToken()},
            init: {
                datainfo: 'info',
                action: function (target, data) {
                    const d = JSON.parse(data);
                    $(target).find(":text").val('');
                    $(target).find('.tripTarget').text(d.target);
                    $(target).find('.tripDate').text(d.date);
                    const tagCategories = $.map(d.categories, function (c) { return `<span class="tag is-rounded">${c}</span>`; });
                    $(target).find('.tripCategories').html(tagCategories.join(' '));
                    $(target).find('.tripContact').text(d.contact);
                }
            },
            confirm: {
                dataurl: 'url',
                pre: function(target, url) {
                    const name = $(target).find(":text").val();
                    const url2 = new URL(url);
                    url2.searchParams.set('name', name);
                    return url2.href;
                },
                post: function (data) {
                    var result = true;
                    if (data == 'AlreadyBooked') {
                        createToast("Anmeldung nicht möglich. Die Person ist bereits angemeldet.", 'is-warning');
                        result = false;
                    } else if (data == 'MaxReached') {
                        createToast("Anmeldung nicht möglich. Die maximale Anzahl wurde erreicht.", 'is-warning');
                        result = false;
                    }
                    sleep(1000).then(() => window.location.replace('@indexUrl'));
                    return result;
                },
                toast: {
                    success: 'Anmeldung wurde durchgeführt.',
                    failed: 'Anmeldung konnte nicht durchgeführt werden.'
                }
            }
        });
    });
</script>
}
