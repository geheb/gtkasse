@page "/Boats/{id:guid}/Rentals"
@model GtKasse.Ui.Pages.Boats.RentalsModel
@{
    ViewData["Title"] = Model.GetNode().Title;
    ViewData["HasFooter"] = true;
    Guid.TryParse(Request.RouteValues["id"] as string, out var id);
    Model.BuildHeaderMenu(new { id });

    var dateConverter = new GermanDateTimeConverter();
    var createUrl = Url.PageLink("CreateRental", null, new { id });
}

@await Html.PartialAsync("_Header")

<section class="section">
    <div class="container">

        <div class="columns is-gapless is-mobile">
            <div class="column is-flex is-align-items-center">@Html.CreateBreadcrumb()</div>
            <div class="column is-narrow">
                <div class="dropdown is-hoverable is-right">
                    <div class="dropdown-trigger">
                        <button class="button" aria-haspopup="true" aria-controls="user-action">
                            <span class="icon is-small">
                                <i class="fa-solid fa-ellipsis-vertical"></i>
                            </span>
                        </button>
                    </div>
                    <div class="dropdown-menu" id="user-action" role="menu">
                        <div class="dropdown-content">
                            <a href="@Url.PageLink(string.Empty)" class="dropdown-item">
                                Nur aktive anzeigen
                            </a>
                            <a href="@Url.PageLink(string.Empty, values: new { filter = 1 })" class="dropdown-item">
                                Alle anzeigen
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (!ModelState.IsValid)
        {
            <div class="notification is-danger">
                <button class="delete"></button>
                <div asp-validation-summary="All"></div>
            </div>
        }

        <h1 class="title is-4">Boot: @Model.BoatDetails</h1>

        <div>
            <a href="@createUrl" class="button is-floating is-link">
                <i class="fas fa-calendar-plus"></i>
            </a>
        </div>

        <div class="list has-hoverable-list-items has-visible-pointer-controls">
            @if (Model.Items.Length < 1)
            {
                <div class="list-item">Keine Mieten vorhanden.&nbsp;<a href="@createUrl">Hier geht es zum Mieten des Bootes.</a></div>
            }
            @foreach (var i in Model.Items)
            {
                <div class="list-item">
                    <div class="list-item-image">
                        <i class="fa-solid @(i.IsFinished ? "fa-calendar has-text-grey-light" : "fa-calendar-days has-text-info") fa-2x"></i>
                    </div>
                    <div class="list-item-content">
                        <div class="list-item-title @(i.IsCancelled ? "is-line-through": string.Empty) @(i.IsFinished ? "has-text-grey-light" : string.Empty)">@dateConverter.Format(i.Start, i.End) - @i.Purpose</div>
                        <div class="list-item-description">
                            @if (i.UserEmail is not null)
                            {
                                <span class="tag is-rounded is-warning"><a href="mailto:@i.UserEmail">@i.User</a></span>
                            }
                            else
                            {
                                <span class="tag is-rounded is-warning">@i.User</span>
                            }
                        </div>
                    </div>
                    <div class="list-item-controls">
                        <div class="buttons">
                        @if (!i.IsFinished && !i.IsCancelled)
                        {
                            <a class="button is-dark is-inverted open-modal" href="#"
                                data-target="#stopRentalModal"
                                data-item="@i.User"
                                data-url="@(Url.PageLink(string.Empty, "stop", new { id = i.Id }))">
                                <span class="icon"><i class="fa-solid fa-calendar-minus"></i></span>
                            </a>
                            <a class="button is-dark is-inverted open-modal" href="#"
                                data-target="#cancelRentalModal"
                                data-item="@i.User"
                                data-url="@(Url.PageLink(string.Empty, "cancel", new { id = i.Id }))">
                                <span class="icon"><i class="fa-solid fa-calendar-xmark"></i></span>
                            </a>
                        }
                        </div>
                    </div>
                </div>
            }
        </div>

    </div>
</section>

@await Html.PartialAsync("_Footer")

@Html.CreateModalTemplateWithOkCancel(
    "stopRentalModal",
    "Miete beenden?",
    @"Möchtest du wirklich die Miete für ""<span class=""modal-item""></span>"" frühzeitig beenden?")

@Html.CreateModalTemplateWithOkCancel(
    "cancelRentalModal",
    "Miete stornieren?",
    @"Möchtest du wirklich die Miete für ""<span class=""modal-item""></span>"" stornieren?")

@section Scripts
{
    <script type="text/javascript">
        $(function () {

            handleModal({
                id: '#stopRentalModal',
                token: {@Html.AjaxCsrfToken()},
                init: {
                    datainfo: 'item',
                    action: function(target, data) {
                        $(target).find('.modal-item').text(data);
                    }
                },
                confirm: {
                    dataurl: 'url',
                    post: function () {
                        sleep(1000).then(() => window.location.reload());
                        return true;
                    },
                    toast: {
                        success: 'Miete wurde frühzeitig beendet.',
                        failed: 'Miete konnte nicht beendet werden.'
                    }
                }
            });

            handleModal({
                id: '#cancelRentalModal',
                token: {@Html.AjaxCsrfToken()},
                init: {
                    datainfo: 'item',
                    action: function(target, data) {
                        $(target).find('.modal-item').text(data);
                    }
                },
                confirm: {
                    dataurl: 'url',
                    post: function () {
                        sleep(1000).then(() => window.location.reload());
                        return true;
                    },
                    toast: {
                        success: 'Miete wurde storniert.',
                        failed: 'Miete konnte nicht storniert werden.'
                    }
                }
            });
        });
    </script>
}
